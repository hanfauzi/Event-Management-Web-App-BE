// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String  @id @default(uuid())
  firstName   String? @map("first_name")
  lastName    String? @map("last_name")
  phoneNumber String? @map("phone_number")
  imageUrl    String? @map("image_url")

  referralCode        String?   @map("referral_code")
  referredById        String?   @map("referred_by_id")
  username            String    @unique
  email               String    @unique
  password            String
  role                Role      @default(USER)
  resetPasswordToken  String?
  resetPasswordExpiry DateTime?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  transactions  Transaction[]
  reviews       Review[]
  userPointLogs UserPointLog[]

  @@map("users")
}

enum Role {
  USER
  ORGANIZER
}

model Organizer {
  id                  String    @id @default(uuid())
  orgName             String?
  username            String    @unique
  email               String    @unique
  password            String
  address             String?
  phoneNumber         String?
  logoUrl             String?
  bio                 String?   @db.Text
  verified            Boolean   @default(false)
  role                Role      @default(ORGANIZER)
  resetPasswordToken  String?
  resetPasswordExpiry DateTime?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  Event     Event[]
  Voucher   Voucher[]

  @@map("organizers")
}

model Event {
  id          String @id @default(uuid())
  organizerId String

  title       String
  startDay    DateTime    @map("start_day") @db.Date()
  endDay      DateTime    @map("end_day") @db.Date()
  startTime   DateTime    @map("start_time") @db.Time()
  endTime     DateTime    @map("end_time") @db.Time()
  category    Category
  location    String
  description String      @db.Text
  imageURL    String      @map("image_url")
  price       Int
  maxCapacity Int         @map("max_capacity")
  status      EventStatus @default(UPCOMING)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  organizer      Organizer        @relation(fields: [organizerId], references: [id])
  tickets        Ticket[]
  transactions   Transaction[]
  reviews        Review[]
  vouchers       Voucher[]
  TicketCategory TicketCategory[]

  @@map("events")
}

enum EventStatus {
  UPCOMING
  ONGOING
  DONE
}

enum Category {
  CULINARY
  MUSIC
  SPORT
  COMEDY
  WORKSHOP
  ART
  TRAVEL
  EDUCATION
  COMMUNITY
  FASHION
  GAMING
  HEALTH
  FAMILY
  RELIGION
  OTHER
}

model TicketCategory {
  id      String @id @default(uuid())
  eventId String
  name    String
  price   Int
  quota   Int

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  event  Event    @relation(fields: [eventId], references: [id])
  Ticket Ticket[]

  @@unique([eventId, name])
  @@map("ticketCategory")
}

model Ticket {
  id               String @id @default(uuid())
  eventId          String @map("event_id")
  ticketCategoryId String

  transactionId String?   @map("transaction_id")
  isCheckedIn   Boolean   @default(false)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  // Relasi
  event          Event          @relation(fields: [eventId], references: [id])
  transaction    Transaction?   @relation(fields: [transactionId], references: [id])
  ticketCategory TicketCategory @relation(fields: [ticketCategoryId], references: [id])

  @@map("tickets")
}

model Transaction {
  id              String            @id @default(uuid())
  userId          String            @map("user_id")
  eventId         String            @map("event_id")
  quantity        Int
  totalPrice      Int               @map("total_price")
  usedPoints      Int               @map("used_points")
  finalPrice      Int               @map("final_price")
  status          TransactionStatus
  paymentProofUrl String?           @map("payment_proof_url")
  expiresAt       DateTime          @map("expires_at")
  couponId        String?           @map("coupon_id")
  voucherId       String?           @map("voucher_id")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")

  // Relasi
  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  voucher Voucher? @relation(fields: [voucherId], references: [id])
  Ticket  Ticket[]

  @@map("transactions")
}

enum TransactionStatus {
  WAITING_PAYMENT
  WAITING_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

model Review {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  eventId   String   @map("event_id")
  rating    Int
  comment   String
  createdAt DateTime @default(now()) @map("created_at")

  // Relasi
  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@map("reviews")
}

model Voucher {
  id             String   @id @default(uuid())
  organizerId    String   @map("organizer_id")
  code           String
  quota          Int
  discountAmount Int      @map("discount_amount")
  startDate      DateTime @map("start_date")
  endDate        DateTime @map("end_date")
  eventId        String   @map("event_id")
  isActive       Boolean  @default(true) @map("is_active")

  organizer   Organizer     @relation(fields: [organizerId], references: [id])
  event       Event         @relation(fields: [eventId], references: [id])
  Transaction Transaction[]

  @@map("vouchers")
}

model UserPointLog {
  id     String @id @default(uuid())
  userId String @map("user_id")
  amount Int

  type      PointLogType
  expiresAt DateTime?    @map("expires_at")
  createdAt DateTime     @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("userPointLogs")
}

enum PointLogType {
  EARN
  SPEND
}
